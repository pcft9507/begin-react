{"version":3,"sources":["CreateUser.js","UserList.js","App.js","serviceWorker.js","index.js"],"names":["CreateUser","username","email","onChange","onCreate","name","placeholder","value","onClick","User","user","onRemove","onToggle","id","active","style","color","cursor","UserList","users","map","key","App","useState","inputs","setInputs","setUsers","nextId","useRef","e","target","current","concat","console","log","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MAsBeA,MApBf,YAA+D,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAChD,OACE,6BACE,2BACEC,KAAK,WACLC,YAAY,qBACZH,SAAUA,EACVI,MAAON,IAET,2BACEI,KAAK,QACLC,YAAY,qBACZH,SAAUA,EACVI,MAAOL,IAET,4BAAQM,QAASJ,GAAjB,kBCfN,SAASK,EAAT,GAA4C,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACrBX,EAAgCS,EAAhCT,SAAUC,EAAsBQ,EAAtBR,MAAOW,EAAeH,EAAfG,GAAIC,EAAWJ,EAAXI,OAC7B,OACE,6BACE,uBACEC,MAAO,CACLC,MAAOF,EAAS,QAAU,QAC1BG,OAAQ,WAEVT,QAAW,kBAAMI,EAASC,KAEzBZ,GAEH,kCAAQC,EAAR,KACA,4BAAQM,QAAS,kBAAMG,EAASE,KAAhC,mBAuBSK,MAlBf,YAAiD,IAA9BC,EAA6B,EAA7BA,MAAOR,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAClC,OACE,6BAEIO,EAAMC,KACJ,SAACV,GAAD,OACE,kBAACD,EAAD,CACEC,KAAMA,EACNW,IAAKX,EAAKG,GACVF,SAAUA,EACVC,SAAUA,SCkDTU,MA7Ef,WAAgB,IAAD,EACeC,mBAAS,CACnCtB,SAAU,GACVC,MAAO,KAHI,mBACNsB,EADM,KACEC,EADF,KAKLxB,EAAoBuB,EAApBvB,SAAUC,EAAUsB,EAAVtB,MALL,EAcaqB,mBAAS,CACjC,CACEV,GAAI,EACJZ,SAAU,QACVC,MAAO,iBACPY,QAAQ,GAEV,CACED,GAAI,EACJZ,SAAU,QACVC,MAAO,iBACPY,QAAQ,GAEV,CACED,GAAI,EACJZ,SAAU,QACVC,MAAO,iBACPY,QAAQ,KA/BC,mBAcNK,EAdM,KAcCO,EAdD,KAmCPC,EAASC,iBAAO,GA6BtB,OACE,oCACE,kBAAC,EAAD,CACE3B,SAAUA,EACVC,MAAOA,EACPC,SA/DW,SAAA0B,GAAM,IAAD,EACIA,EAAEC,OAAlBzB,EADY,EACZA,KAAME,EADM,EACNA,MACdkB,EAAU,2BACLD,GADI,kBAENnB,EAAOE,MA4DNH,SAjCW,WACf,IAAMM,EAAO,CACXG,GAAIc,EAAOI,QACX9B,WACAC,SAEFwB,EAASP,EAAMa,OAAOtB,IACtBe,EAAU,CACRxB,SAAU,GACVC,MAAO,KAET+B,QAAQC,IAAIP,EAAOI,SACnBJ,EAAOI,SAAW,KAuBhB,kBAAC,EAAD,CAAUZ,MAAOA,EAAOR,SApBX,SAAAE,GACfa,EAASP,EAAMgB,QAAO,SAAAzB,GAAI,OAAIA,EAAKG,KAAMA,OAmBKD,SAhB/B,SAAAC,GACfa,EAASP,EAAMC,KACb,SAAAV,GAAI,OAAIA,EAAKG,KAAOA,EAAZ,2BACDH,GADC,IACKI,QAASJ,EAAKI,SACzBJ,WCpDY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.7a4483ff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction CreateUser ({ username, email, onChange, onCreate }) {\r\n  return (\r\n    <div>\r\n      <input \r\n        name=\"username\" \r\n        placeholder=\"계정명\"  \r\n        onChange={onChange}\r\n        value={username}\r\n      />\r\n      <input \r\n        name=\"email\" \r\n        placeholder=\"이메일\"  \r\n        onChange={onChange}\r\n        value={email}\r\n      />\r\n      <button onClick={onCreate}>등록</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateUser;","import React from 'react';\r\n\r\nfunction User({user, onRemove, onToggle }) {\r\n  const { username, email, id, active } = user;\r\n  return (\r\n    <div>\r\n      <b \r\n        style={{\r\n          color: active ? 'green' : 'black',\r\n          cursor: 'pointer'\r\n        }}\r\n        onClick = {() => onToggle(id)}\r\n      >\r\n        {username}\r\n      </b> \r\n      <span>({email})</span>\r\n      <button onClick={() => onRemove(id)} >삭제 3</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction UserList({users, onRemove, onToggle }) {\r\n  return (\r\n    <div>\r\n      {\r\n        users.map(\r\n          (user) => (\r\n            <User \r\n              user={user} \r\n              key={user.id} \r\n              onRemove={onRemove} \r\n              onToggle={onToggle}  \r\n            />)\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserList;","import React, {useRef, useState} from \"react\";\nimport CreateUser from './CreateUser';\nimport UserList from './UserList';\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: '',\n  });\n  const { username, email } = inputs;\n  const onChange = e => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value\n    })\n  }\n\n  const [users, setUsers] = useState([\n    {\n      id: 1,\n      username: 'user1',\n      email: 'user1@mail.com',\n      active: true,\n    },\n    {\n      id: 2,\n      username: 'user2',\n      email: 'user2@mail.com',\n      active: false,\n    },\n    {\n      id: 3,\n      username: 'user3',\n      email: 'user3@mail.com',\n      active: false,\n    },\n  ]);\n\n  const nextId = useRef(4);\n\n  const onCreate = () => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    };\n    setUsers(users.concat(user));\n    setInputs({\n      username: '',\n      email: ''\n    })\n    console.log(nextId.current);\n    nextId.current += 1;\n  };\n\n  const onRemove = id => {\n    setUsers(users.filter(user => user.id !==id));\n  }\n\n  const onToggle = id => {\n    setUsers(users.map(\n      user => user.id === id\n      ? { ...user, active: !user.active }\n      : user\n    ));\n  }\n\n  return (\n    <>\n      <CreateUser \n        username={username} \n        email={email} \n        onChange={onChange} \n        onCreate={onCreate} \n      />\n      <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}